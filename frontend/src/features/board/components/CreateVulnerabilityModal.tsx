import { useEffect, useState } from 'react';
import {
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Select,
  FormControl,
  InputLabel,
  MenuItem,
  FormHelperText
} from '@mui/material';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import { useVulnerabilityStore } from '../store';
import { CreateVulnerabilityModalProps } from '../../../types/allTypes';

const validationSchema = Yup.object({
  title: Yup.string().required('Title is required'),
  description: Yup.string().required('Description is required'),
  criticality: Yup.string().required('Criticality is required'),
  cwe: Yup.string().required('CWE is required'),
  suggestedFix: Yup.string().required('Suggested fix is required'),
  status: Yup.string().required('Status is required')
  // reporterId: Yup.number().required('Reporter is required'),
  // assigneeId: Yup.number()
});

const CreateVulnerabilityModal: React.FC<CreateVulnerabilityModalProps> = ({
  open,
  handleClose,
  vulnerability
}) => {
  console.log('initialValues', vulnerability || {});
  const postVulnerability = useVulnerabilityStore(state => state.postVulnerability);
  const patchVulnerability = useVulnerabilityStore(state => state.patchVulnerability);

  const handleCloseModal = () => {
    handleClose();
    formik.resetForm();
  };

  const formik = useFormik({
    enableReinitialize: true,
    initialValues: vulnerability || {
      title: '',
      description: '',
      criticality: '',
      cwe: '',
      suggestedFix: '',
      status: '',
      reporterId: 1,
      assigneeId: 1
    },
    validationSchema,
    validateOnChange: true,
    validateOnBlur: true,
    onSubmit: async values => {
      try {
        if (vulnerability) {
          const { id, createdAt, updatedAt, reporter, assignee, ...cleanValues } = values;
          await patchVulnerability(vulnerability.id, cleanValues);
        } else {
          await postVulnerability(values);
        }
        handleCloseModal();
      } catch (err) {
        console.error('Error while creating:', err);
      }
    }
  });

  useEffect(() => {}, [formik.values]);

  return (
    <Dialog open={open} onClose={handleCloseModal} maxWidth="sm" fullWidth>
      <DialogTitle fontWeight={600}>
        {vulnerability ? 'Edit Vulnerability' : 'Create New Vulnerability'}
      </DialogTitle>
      <form onSubmit={formik.handleSubmit}>
        <DialogContent sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
          <TextField
            color="secondary"
            size="small"
            label="Title"
            name="title"
            value={formik.values.title}
            onChange={formik.handleChange}
            error={formik.touched.title && Boolean(formik.errors.title)}
            helperText={formik.touched.title && formik.errors.title}
            fullWidth
          />
          <TextField
            color="secondary"
            size="small"
            label="Description"
            name="description"
            value={formik.values.description}
            onChange={formik.handleChange}
            error={formik.touched.description && Boolean(formik.errors.description)}
            helperText={formik.touched.description && formik.errors.description}
            fullWidth
            multiline
            rows={4}
          />
          <FormControl
            size="small"
            color="secondary"
            fullWidth
            error={formik.touched.criticality && Boolean(formik.errors.criticality)}
          >
            <InputLabel id="criticality-select-label">Criticality</InputLabel>
            <Select
              color="secondary"
              labelId="criticality-select-label"
              id="criticality-select"
              name="criticality"
              value={formik.values.criticality}
              label="Criticality"
              onChange={formik.handleChange}
              onBlur={formik.handleBlur}
            >
              <MenuItem value="LOW">Low</MenuItem>
              <MenuItem value="MEDIUM">Medium</MenuItem>
              <MenuItem value="HIGH">High</MenuItem>
              <MenuItem value="CRITICAL">Critical</MenuItem>
            </Select>
            <FormHelperText>
              {formik.touched.criticality && formik.errors.criticality}
            </FormHelperText>
          </FormControl>
          <TextField
            color="secondary"
            size="small"
            label="CWE"
            name="cwe"
            value={formik.values.cwe}
            onChange={formik.handleChange}
            fullWidth
            multiline
            rows={4}
          />
          <TextField
            color="secondary"
            size="small"
            label="Suggested Fix"
            name="suggestedFix"
            value={formik.values.suggestedFix}
            onChange={formik.handleChange}
            error={formik.touched.suggestedFix && Boolean(formik.errors.suggestedFix)}
            helperText={formik.touched.suggestedFix && formik.errors.suggestedFix}
            fullWidth
            multiline
            rows={3}
          />
          <FormControl
            size="small"
            color="secondary"
            fullWidth
            error={formik.touched.criticality && Boolean(formik.errors.criticality)}
          >
            <InputLabel id="status-select-label">Status</InputLabel>
            <Select
              color="secondary"
              labelId="status-select-label"
              id="status-select"
              name="status"
              value={formik.values.status}
              label="Status"
              onChange={formik.handleChange}
              onBlur={formik.handleBlur}
            >
              <MenuItem value="PENDING_FIX">PENDING FIX</MenuItem>
              <MenuItem value="IN_PROGRESS">IN PROGRESS</MenuItem>
              <MenuItem value="SOLVED">SOLVED</MenuItem>
              <MenuItem value="FALSE_POSITIVE">FALSE POSITIVE</MenuItem>
            </Select>
            <FormHelperText>{formik.touched.status && formik.errors.status}</FormHelperText>
          </FormControl>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseModal}>Cancel</Button>
          <Button variant="contained" type="submit">
            {vulnerability ? 'Edit' : 'Create'}
          </Button>
        </DialogActions>
      </form>
    </Dialog>
  );
};

export default CreateVulnerabilityModal;
